import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types.input_file import FSInputFile
from aiogram import F
from classes import *
from configs.config import *
from keyboards import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=token)
dp = Dispatcher()

global course
course = ''
chat_id = ''


@dp.message(Command("start"))
async def cmd_stardasdsat(message: types.Message):
    global chat_id
    chat_id = message.chat.id
    await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile('./images/logo_to_chat.png', 'rb'))
    await message.answer("<b>–ü—Ä–∏–≤–µ—Ç!üéâ</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —É–ø—Ä–æ—â–µ–Ω–∏—é —É—á–µ–±–Ω–æ–π –∂–∏–∑–Ω–∏ –≤ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–º –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ø—Ä–∏ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ –†–§ –ö–§\n\n"
                        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ <i><b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b></i>, –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –∫—É—Ä—Å –∫–Ω–æ–ø–∫–æ–π <i><b>–í—ã–±–æ—Ä –∫—É—Ä—Å–∞</b></i>.\n\n"
                        "–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ —ç—Ç–æ –Ω–µ –∏—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ üöÄ", reply_markup= keyboard_menu(), parse_mode='HTML')

@dp.message(F.text == '–í—ã–±–æ—Ä –∫—É—Ä—Å–∞üìé')
async def cmd_course(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å", reply_markup=keyboard_course())

@dp.message(F.text.lower() == "1 –∫—É—Ä—Å")
async def course1(message: types.Message):
    global course 
    course = '1'
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–∏—Å–∞–ª!', reply_markup= keyboard_menu())

@dp.message(F.text.lower() == "2 –∫—É—Ä—Å")
async def course2(message: types.Message):
    global course 
    course = '2'
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–∏—Å–∞–ª!', reply_markup= keyboard_menu())

@dp.message(F.text.lower() == "3 –∫—É—Ä—Å")
async def course3(message: types.Message):
    global course 
    course = '3'
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–∏—Å–∞–ª!', reply_markup= keyboard_menu())

@dp.message(F.text.lower() == "4 –∫—É—Ä—Å")
async def course4(message: types.Message):
    global course 
    course = '4'
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–∏—Å–∞–ª!', reply_markup= keyboard_menu())

@dp.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÖ')
async def cmd_sheduler(message: types.Message):
    global course
    if course != '':
        response = univer(course).schedule()
        document = FSInputFile(response)
        await bot.send_document(message.chat.id, document, reply_markup= keyboard_menu())
    else:
        await message.answer('–û—à–∏–±–∫–∞! –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å!', reply_markup= keyboard_menu())

@dp.message(Command("whatcourse"))
async def start(message: types.Message):
    await message.answer("–¢—ã —É—á–∏—à—å—Å—è –Ω–∞: " + course)

@dp.message(F.text == '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—èüë§')
async def kn(message):
    await bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å! \n\n–û–±—Ä–∞–∑–µ—Ü: \n–õ–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å')

@dp.message(F.text.lower()[3:6] == 'dot' )
async def logpass(message):
    log_data = message.text.split(':')
    login = security().encrypt(log_data[0])
    password = security().encrypt(log_data[1])
    log_data = [login, password]
    chat_id = message.chat.id
    await message.answer(univer(course).database_auth(log_data, chat_id), reply_markup= keyboard_menu())

@dp.message(F.text == '–ó–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞üìÇ')
async def grades(message:types.Message):
    chat_id = message.chat.id
    if univer(course).check_user_id_to_parsing(chat_id) is False:
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!')
    else:
        try:
            response = univer(course).parsing(univer(course).check_user_id_to_parsing(chat_id))
            await message.answer(response, reply_markup= keyboard_menu())
        except Exception as e:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}', reply_markup= keyboard_menu())


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())